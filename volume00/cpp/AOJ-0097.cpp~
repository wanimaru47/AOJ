#include <iostream>
#include <cstdio>
using namespace std;

int dp [10][2000];

int dfs (int n, int s, int t) {
    if (n == 0) return s == 0 ? 1 : 0;
    if (s < 0 || t < 0) return 0;
    if (dp[n][s] > -1) return dp[n][s];

    cout << "n : " << n << ", s : " << s << ", t : " << t << endl;
    int res1 = dfs (n-1, s-t, t-1), res2 = dfs(n, s, t-1);
    cout << res1 << " " << res2 << endl;
    return dp[n][s] += (res1 + res2);
}

int main ()
{
     int n, s;
     dp[0][0] = 1;
     for (int i = 2; i < 10; i++) {
         for (int j = 0; j < 2000; j++) {
             dp[i][j] = -1;
         }
     }
     for (int i = 0; i < 101; i++)
         dp[1][i] = 1;

     while (cin >> n >> s , (n || s)) {
         cout << dfs(n, s, 100) << endl;
         for (int i = 0; i < 10; i++) {
             for (int j = 0; j < 10; j++) {
                 cout << dp[i][j] << " ";
             }
             cout << endl;
         }
         cout << dfs(n, s, 100) << endl;
     }
     
     return 0;
}
